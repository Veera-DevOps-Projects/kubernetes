# ConfigMap for Nginx Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
data:
  default.conf: |
    server {
        listen 80;

        location / {
            proxy_pass http://python-webapp:5000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

---

# Secret for MySQL Credentials
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: Opaque
data:
  mysql-root-password: cGFzc3dvcmQ=  # base64 encoded 'password'
  mysql-database: d2Vic2l0ZQ==       # base64 encoded 'website'
  mysql-user: dXNlcg==               # base64 encoded 'user'
  mysql-password: cGFzc3dvcmQ=       # base64 encoded 'password'

---

# Deployment for MySQL
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
        - name: mysql
          image: mysql:5.7
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: mysql-root-password
            - name: MYSQL_DATABASE
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: mysql-database
            - name: MYSQL_USER
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: mysql-user
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: mysql-password
          ports:
            - containerPort: 3306
          volumeMounts:
            - name: mysql-data
              mountPath: /var/lib/mysql
      volumes:
        - name: mysql-data
          emptyDir: {}

---

# Service for MySQL
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  selector:
    app: mysql
  ports:
    - protocol: TCP
      port: 3306
      targetPort: 3306

---

# ConfigMap for Python Web App Code
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
data:
  app.py: |
    from flask import Flask, request, redirect, url_for, render_template_string
    import os
    import pymysql

    app = Flask(__name__)

    # MySQL connection settings from environment variables
    MYSQL_HOST = os.getenv('MYSQL_HOST', 'mysql')
    MYSQL_DATABASE = os.getenv('MYSQL_DATABASE', 'website')
    MYSQL_USER = os.getenv('MYSQL_USER', 'user')
    MYSQL_PASSWORD = os.getenv('MYSQL_PASSWORD', 'password')

    # Connection to the MySQL database
    def get_db_connection():
        return pymysql.connect(
            host=MYSQL_HOST,
            user=MYSQL_USER,
            password=MYSQL_PASSWORD,
            database=MYSQL_DATABASE
        )

    # HTML templates
    form_template = '''
    <!DOCTYPE html>
    <html>
    <head>
        <title>User Data</title>
    </head>
    <body style="background-color: {{ color }};">
        <h1>User Data Form</h1>
        <form action="/userdata" method="post">
            <label for="user">User:</label><br>
            <input type="text" id="user" name="user"><br>
            <label for="greeting">Greeting:</label><br>
            <input type="text" id="greeting" name="greeting"><br><br>
            <input type="submit" value="Submit">
        </form>
    </body>
    </html>
    '''

    greeting_template = '''
    <!DOCTYPE html>
    <html>
    <head>
        <title>Greeting</title>
    </head>
    <body style="background-color: {{ color }};">
        <h1>Greeting</h1>
        {% for user, greeting in greetings %}
            <p>{{ user }}: {{ greeting }}</p>
        {% endfor %}
    </body>
    </html>
    '''

    @app.route('/userdata', methods=['GET', 'POST'])
    def userdata():
        color = os.getenv('COLOR', 'white')
        if request.method == 'POST':
            user = request.form['user']
            greeting = request.form['greeting']
            connection = get_db_connection()
            cursor = connection.cursor()
            cursor.execute("INSERT INTO greetings (user, greeting) VALUES (%s, %s)", (user, greeting))
            connection.commit()
            connection.close()
            return redirect(url_for('greeting'))
        return render_template_string(form_template, color=color)

    @app.route('/greeting')
    def greeting():
        color = os.getenv('COLOR', 'white')
        connection = get_db_connection()
        cursor = connection.cursor()
        cursor.execute("SELECT user, greeting FROM greetings")
        greetings = cursor.fetchall()
        connection.close()
        return render_template_string(greeting_template, greetings=greetings, color=color)

    if __name__ == '__main__':
        app.run(host='0.0.0.0', port=5000)

---

# Deployment for Python Web App
apiVersion: apps/v1
kind: Deployment
metadata:
  name: python-webapp
spec:
  replicas: 1
  selector:
    matchLabels:
      app: python-webapp
  template:
    metadata:
      labels:
        app: python-webapp
    spec:
      containers:
        - name: python
          image: python:3.8-slim
          command: ["python"]
          args: ["/app/app.py"]
          env:
            - name: COLOR
              value: "lightblue"
            - name: MYSQL_HOST
              value: "mysql"
            - name: MYSQL_DATABASE
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: mysql-database
            - name: MYSQL_USER
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: mysql-user
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: mysql-password
          ports:
            - containerPort: 5000
          volumeMounts:
            - name: app-data
              mountPath: /data
            - name: app-code
              mountPath: /app
      volumes:
        - name: app-data
          emptyDir: {}
        - name: app-code
          configMap:
            name: app-config

---

# Service for Python Web App
apiVersion: v1
kind: Service
metadata:
  name: python-webapp
spec:
  selector:
    app: python-webapp
  ports:
    - protocol: TCP
      port: 5000
      targetPort: 5000

---

# Deployment for Nginx
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
        - name: nginx
          image: nginx:latest
          volumeMounts:
            - name: nginx-config
              mountPath: /etc/nginx/conf.d
      volumes:
        - name: nginx-config
          configMap:
            name: nginx-config

---

# Service for Nginx
apiVersion: v1
kind: Service
metadata:
  name: nginx
spec:
  type: NodePort
  selector:
    app: nginx
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
      nodePort: 30080
